@mixin clearfix {
  &:before,
  &:after {
    content: ' ';
    display: table;
  }

  &:after {
    clear: both;
  }
}

@function parseInt($n) { /* 2 */
  @return $n / ($n * 0 + 1);
}

@mixin table-rows($color, $basevalue) {
  @include rem("padding", 4px 0);
  background: lighten($color, $basevalue);
  text-align: center;
  transition: background 500ms;

  &:nth-child(2n+1) {
    background: lighten($color, $basevalue - 10);
  }

  &:hover {
    background: lighten($color, $basevalue - 30);
    cursor: pointer;
  }
}

@mixin table-header($color) {
  @include rem("padding", 8px 5px);
  background: $color;
  color: #FFFFFF;
  text-align: center;
}

@mixin rem($property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $font-base-px / 1rem;

  // Print the first line in pixel values
  #{$property}: $px-values;

  // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == 'number' {
    #{$property}: $px-values / $baseline-rem;
    } @else {
    // Create an empty list that we can dump values into
    $rem-values: unquote('');

    @each $value in $px-values {
      // If the value is zero, return 0
      @if parse-int($value) {
        $rem-values: append($rem-values, $value);
        } @else {
          $rem-values: append($rem-values, $value / $baseline-rem);
        }
      }

    // Return the property and its list of converted values
    #{$property}: $rem-values;
  }
}